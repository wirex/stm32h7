### 구현 사항 :

STM32H7(Cortex-M7) 기반의 코드를 기준으로, 시스템의 전체 사용 예시를 상세히 설명하겠습니다. 
이 시스템은 배터리 전압/전류/전력을 측정하여 SPI 플래시(W25Q128)에 저장하고, 
UART 명령 또는 버튼 입력을 통해 데이터를 분석하거나 초기화하는 기능을 제공합니다. 
아래는 시스템의 사용 흐름, 사용자 입력 방법, 예상 출력, 
그리고 주요 기능별 사용 예시를 포괄적으로 정리한 내용입니다.

### 시스템 개요
- **목적**: 배터리 상태(전압, 전류, 전력)를 주기적으로 측정하고, SPI 플래시에 데이터를 저장하며, 
사용자 요청(UART 명령 또는 버튼 입력)에 따라 배터리 사용 상태를 분석하거나 데이터를 초기화.

- **주요 기능**:
  1. **데이터 수집**: ADC로 10초마다 전압(V), 전류(mA), 전력(mW)을 측정, 1분마다 평균 데이터를 저장.
  2. **데이터 저장**: SPI 플래시(W25Q128, 16MB)의 섹터 1~63에 데이터 기록(약 53시간 분량).
  3. **UART 명령 처리**:
     - `SET_TIME`: RTC 시간 설정.
     - `GET_BATTERY_STATUS`: 저장된 데이터 분석 및 출력.
  4. **버튼 입력 처리**:
     - 짧은 누름(< 2초): 데이터 로그 초기화(기록 포인터 재설정).
     - 긴 누름(≥ 2초): 전체 SPI 플래시 초기화.
  5. **사용자 피드백**: LED(PC13)로 작업 상태 표시(빠른 점멸: 진행 중, 느린 점멸: 완료), UART로 메시지 출력.

- **하드웨어**:
  - MCU: STM32H743.
  - SPI 플래시: W25Q128 (PA5: SCK, PA6: MISO, PA7: MOSI, PB0: CS).
  - UART: PA9(TX), PA10(RX), 115200 baud.
  - ADC: PC0/1(전압), PA3/4(전류).
  - 버튼: PB1(EXTI1, 풀업).
  - LED: PC13(오픈 드레인, 액티브 로우).
  - RTC: VBAT에 코인셀 배터리.

### 전체 사용 흐름
1. **시스템 시작**:
   - 전원 공급 시 MCU가 초기화되고, 시스템 클럭, RTC, ADC, UART, SPI, TIM2, GPIO(버튼/LED)가 설정됨.
   - SPI 플래시의 메타데이터를 읽어 마지막 기록 주소 확인. 유효하지 않으면 데이터 섹터(섹터 1)를 초기화.
   - ADC DMA가 시작되어 전압/전류 데이터를 주기적으로 수집.
   - UART 수신 인터럽트 활성화, 버튼 EXTI 인터럽트 대기.

2. **데이터 수집 및 저장**:
   - 10초마다 전압, 전류, 전력을 측정하고 SPI 플래시에 저장(`DataRecord10s`, 18바이트).
   - 1분마다 평균 전압, 전류, 전력을 계산하고 저장(`DataRecord1min`, 14바이트).
   - 데이터는 섹터 1~63(252KB)에 순차적으로 기록, 약 53시간 분량 저장 가능.
   - 섹터 끝에 도달 시 섹터 1부터 재기록.

3. **사용자 입력 처리**:
   - **UART 명령**: 터미널(예: PuTTY)로 명령 입력.
   - **버튼 입력**: PB1 버튼을 눌러 데이터 초기화.
   - **피드백**: LED 점멸과 UART 메시지로 작업 상태 확인.

4. **데이터 분석**:
   - UART 명령 `GET_BATTERY_STATUS`로 SPI 플래시 데이터를 분석하여 총 에너지(Wh), 평균 전압(V), 전류(mA), 전력(mW), 시간 범위를 출력.

5. **초기화**:
   - 버튼 짧은 누름: 데이터 섹터 초기화, 기록 포인터 재설정.
   - 버튼 긴 누름: 전체 SPI 플래시 지우기, 메타데이터 초기화.

### 사용 예시 (상세)
아래는 시스템을 실제로 사용하는 시나리오별 예시입니다. 현재 시간은 2025년 5월 26일 오후 7:12 (KST)로 가정합니다.

---

#### 1. 시스템 부팅 및 초기 상태
- **동작**: 전원 공급 후 시스템 초기화.
- **예상 동작**:
  - SPI 플래시 메타데이터를 읽어 기록 포인터 확인.
  - 메타데이터가 유효하지 않으면 섹터 1을 지우고 `last_write_addr`를 `FLASH_DATA_ADDR`(0x00001000)로 설정.
  - ADC가 전압/전류 데이터를 수집 시작.
  - UART로 디버깅 메시지 출력(터미널 연결 시):
    
    10s: Time=0s, V=3.70V, I=500.00mA, P=1850.00mW
    
  - LED(PC13): 꺼짐 상태.
- **사용자 작업**: 터미널 프로그램(PuTTY, Tera Term 등)을 열어 UART(115200 baud) 연결.


#### 2. RTC 시간 설정 (UART 명령)
- **목적**: 정확한 타임스탬프를 위해 RTC 시간 설정.
- **입력**: 터미널에서 다음 명령 입력 (CR 또는 LF로 종료):
  
  SET_TIME 2025/05/26 19:12
  
- **예상 출력**:
  
  RTC set successfully
  
- **오류 케이스**:
  - 잘못된 형식:
    
    SET_TIME 2025/13/26 19:12
    
    출력: `Invalid date/time`
  - 포맷 오류:
    
    SET_TIME 2025-05-26
    
    출력: `Invalid format`
- **결과**: RTC가 2025/05/26 19:12:00으로 설정, 이후 데이터 레코드의 타임스탬프가 해당 시간 기준으로 기록.



#### 3. 배터리 데이터 수집 및 저장
- **동작**: 시스템이 10초마다 데이터를 측정하고 SPI 플래시에 저장.
- **예상 동작**:
  - 10초 후 (19:12:10):
    
    10s: Time=10s, V=3.71V, I=495.00mA, P=1836.45mW
    
    - `DataRecord10s`가 SPI 플래시 주소 0x00001000에 저장.
  - 1분 후 (19:13:00):
    
    1min: Avg V=3.70V, Avg I=500.00mA, Avg P=1850.00mW
    
    - `DataRecord1min`이 다음 주소(0x00001012)에 저장.
- **확인 방법**: 터미널에서 디버깅 메시지 확인.
- **참고**: 데이터는 약 53시간(252KB) 저장 가능, 이후 섹터 1부터 덮어씌움.



#### 4. 배터리 상태 분석 (UART 명령)
- **목적**: 저장된 데이터를 분석하여 배터리 사용 상태 확인.
- **입력**: 터미널에서 명령 입력:
  
  GET_BATTERY_STATUS
  
- **예상 출력** (예: 2시간 데이터 수집 후):
  
  Battery Status: 2025/05/26 19:12:00 to 2025/05/26 21:12:00, Total Energy=4.44Wh, Avg V=3.70V, Avg I=500.00mA, Avg P=1850.00mW, Errors=0
  
  - **설명**:
    - 시간 범위: 데이터의 시작/종료 시간.
    - 총 에너지: 10초 및 1분 레코드의 전력 합산 (mW → Wh 변환).
    - 평균 값: 유효 레코드의 평균.
    - Errors: CRC 오류 레코드 수.
- **오류 케이스**:
  - 데이터 없음:
    
    No valid data found
    
- **결과**: UART로 배터리 상태 요약 출력, LED 상태 변경 없음.



#### 5. 데이터 로그 초기화 (버튼 짧은 누름)
- **목적**: 데이터 기록을 초기화하여 새로 시작.
- **입력**: PB1 버튼을 2초 미만으로 누름 (예: 1초).
- **예상 동작**:
  - **LED(PC13)**:
    - 누르는 동안: 빠른 점멸 (100ms 간격, 4회).
    - 완료 후: 느린 점멸 (500ms 간격, 2회).
  - **UART 출력**:
    
    Data log reset
    
  - **내부 동작**:
    - 섹터 1(데이터 섹터) 지우기.
    - 메타데이터 업데이트: `last_write_addr = 0x00001000`, `init_flag = 0xA5A5A5A5`.
    - 이후 데이터 기록이 섹터 1 시작부터 재시작.
- **결과**: 기존 데이터 삭제, 새 데이터 기록 준비.



#### 6. 전체 SPI 플래시 초기화 (버튼 긴 누름)
- **목적**: SPI 플래시 전체를 초기화하여 모든 데이터와 메타데이터 삭제.
- **입력**: PB1 버튼을 2초 이상 누름 (예: 3초).
- **예상 동작**:
  - **LED(PC13)**:
    - 진행 중: 빠른 점멸 (100ms 간격, 4회).
    - 완료 후: 느린 점멸 (500ms 간격, 2회).
  - **UART 출력**:
    
    SPI Flash chip erased
    
  - **내부 동작**:
    - W25Q128 전체 지우기 (명령 0xC7, 약 20~100초 소요).
    - 메타데이터 초기화: `last_write_addr = 0x00001000`, `sector_index = 1`, `init_flag = 0xA5A5A5A5`.
    - 모든 섹터(0~4095) 데이터 삭제.
- **결과**: 플래시가 공장 초기화 상태로 복구, 새 데이터 기록 준비.



#### 7. 오류 상황 처리
- **UART 오류**:
  - 입력: 잘못된 명령 (예: `INVALID_CMD`).
  - 출력: `Unknown command`
  - 입력: 버퍼 오버플로우 (32바이트 초과).
  - 출력: `Buffer overflow`
- **SPI 플래시 데이터 손상**:
  - CRC 오류 발생 시 `Analyze_Battery_Status`에서 `Errors` 카운트 증가.
  - 예: `Errors=2` (2개 레코드 손상).
- **버튼 입력 오류**:
  - 디바운싱(50ms)으로 노이즈 방지.
  - 버튼 떼기 전에 2초 미만이면 짧은 누름, 이상이면 긴 누름 처리.



### 사용 시나리오 예시
**시나리오**: 배터리 모니터링 장치를 설치하고 2시간 동안 데이터를 수집한 후 상태를 확인하고 초기화.

1. **설치 및 부팅**:
   - 장치 전원 연결, UART 터미널 연결.
   - 부팅 후 디버깅 메시지 확인:
     
     10s: Time=0s, V=3.70V, I=500.00mA, P=1850.00mW
     

2. **시간 설정**:
   - 명령 입력: `SET_TIME 2025/05/26 19:12`
   - 출력: `RTC set successfully`

3. **데이터 수집**:
   - 2시간 동안 데이터 기록, 터미널에서 주기적 출력 확인:
     
     10s: Time=7200s, V=3.69V, I=502.00mA, P=1852.38mW
     1min: Avg V=3.70V, Avg I=500.50mA, Avg P=1851.85mW
     

4. **상태 확인**:
   - 명령 입력: `GET_BATTERY_STATUS`
   - 출력:
     
     Battery Status: 2025/05/26 19:12:00 to 2025/05/26 21:12:00, Total Energy=4.44Wh, Avg V=3.70V, Avg I=500.00mA, Avg P=1850.00mW, Errors=0
     

5. **데이터 초기화**:
   - PB1 버튼 1초 누름.
   - LED: 빠른 점멸 → 느린 점멸.
   - 출력: `Data log reset`
   - 이후 데이터 기록이 섹터 1부터 재시작.

6. **전체 초기화** (필요 시):
   - PB1 버튼 3초 누름.
   - LED: 빠른 점멸 → 느린 점멸.
   - 출력: `SPI Flash chip erased`
   - 모든 데이터 삭제, 플래시 초기화.

---

### 추가 참고사항
- **터미널 설정**: UART 통신을 위해 PuTTY 또는 Tera Term 사용, 115200 baud, 8-N-1 설정.
- **버튼 사용 주의**: 긴 누름은 데이터 완전 삭제를 유발하므로 주의. 추가 확인 절차(예: UART 명령) 필요 시 추가 구현.
- **데이터 용량**: 약 53시간 데이터 저장 가능, 더 긴 기간 필요 시 섹터 관리 로직 확장 가능.
- **확장 가능 기능**:
  - 특정 시간대 데이터 필터링.
  - SPI/UART DMA로 성능 최적화.
  - 백업 후 초기화 기능.
- **디버깅**: UART 디버깅 메시지로 동작 확인, 추가 로그 필요 시 구현

이 설명은 시스템의 전반적인 사용 흐름과 각 기능별 사용 예시를 다룹니다. 
특정 기능(예: 새로운 UART 명령, 다른 버튼 동작)에 대한 추가 필요

감사합니다.